df$strand <- gsub(pattern="[^+-]+", replacement = '*', x = df$strand)
}
library("GenomicRanges")
if(length(df)==3){
gr <- with(df, GRanges(chr, IRanges(start, end)))
} else if (length(df)==4){
gr <- with(df, GRanges(chr, IRanges(start, end), id=id))
} else if (length(df)==5){
gr <- with(df, GRanges(chr, IRanges(start, end), id=id, score=score))
} else if (length(df)==6){
gr <- with(df, GRanges(chr, IRanges(start, end), id=id, score=score, strand=strand))
}
return(gr)
}
bed_to_granges("ImmuneGenes.bed")
header <- c('chr','start','end','strand','id','score')
header
names(df) <- header[1:length(names(df))]
names(df)
if('strand' %in% colnames(df)){
df$strand <- gsub(pattern="[^+-]+", replacement = '*', x = df$strand)
}
library("GenomicRanges")
if(length(df)==3){
gr <- with(df, GRanges(chr, IRanges(start, end)))
} else if (length(df)==4){
gr <- with(df, GRanges(chr, IRanges(start, end), id=id))
} else if (length(df)==5){
gr <- with(df, GRanges(chr, IRanges(start, end), id=id, score=score))
} else if (length(df)==6){
gr <- with(df, GRanges(chr, IRanges(start, end), id=id, score=score, strand=strand))
}
(length(df)==3)
(length(df)==5)
with(df, GRanges(chr, IRanges(start, end), id=id, score=score))
?with
GRanges(chr, IRanges(start, end)
as_tibble(df)
data <- as_tibble(df)
GRanges(seqnames = data$chr,ranges = IRanges(data$start,data$end))
GRanges(seqnames = data$chr,ranges = IRanges(data$start,data$end),strand = data$strand)
GRanges(seqnames = data$chr,ranges = IRanges(data$start,data$end),strand = data$strand, id = data$id)
data <- read_delim("ImmuneGenes.bed", delim = "\t", col_names = c('chr','start','end','strand','id'))
data
gr <- GRanges(seqnames = data$chr,ranges = IRanges(data$start,data$end),strand = data$strand, id = data$id)
?GenomicRanges
gr[[1]]
gr[seqnames(gr)[[1]]
gr[seqnames(gr)[[1]]]
seqnames(gr)
?GenomicRanges
View(gr)
GenomicRanges::distance(gr, gr, select="all")
GenomicRanges::distance(gr[id == "AT1G10920"], gr, select="all")
gr[id == "AT1G10920"]
gr["AT1G10920"]
gr[1]
GenomicRanges::distance(gr[1], gr, select="all")
length(gr)
distances <- vector(length = length(gr))
for (i in 1:length(gr)){
distances[[i]] <- GenomicRanges::distance(gr[i], gr, select="all")
}
distances <- vector(length = length(gr))
for (i in 1:length(gr)){
distances[[i]] <- GenomicRanges::distance(gr[i], gr, select="all")
}
distances <- vector(length = length(gr), type = "list")
for (i in 1:length(gr)){
distances[[i]] <- GenomicRanges::distance(gr[i], gr, select="all")
}
i <- 1
a <- GenomicRanges::distance(gr[i], gr, select="all")
a
class(a)
gr[i]@seqinfo
gr[i]@ranges@NAMES
gr[i]@elementMetadata@rownames
gr[i]@elementMetadata@listData$id
colnames(a) <- gr[i]@elementMetadata@listData$id
b <- tibble(column = a)
b
colnames(b) <- gr[i]@elementMetadata@listData$id
b
distances[[i]] <- b
distances <- vector(length = length(gr), type = "list")
for (i in 1:length(gr)){
i <- 1
a <- GenomicRanges::distance(gr[i], gr, select="all")
b <- tibble(column = a)
colnames(b) <- gr[i]@elementMetadata@listData$id
distances[[i]] <- b
}
distances
distances <- vector(length = length(gr), type = "list")
for (i in 1:length(gr)){
a <- GenomicRanges::distance(gr[i], gr, select="all")
b <- tibble(column = a)
colnames(b) <- gr[i]@elementMetadata@listData$id
distances[[i]] <- b
}
distances
dist_matrix <- tibble(distances)
dist_matrix
dist_matrix <- tibble(distances[1:length(gr)])
dist_matrix
distances
dist_matrix <- distances[[1]]
dist_matrix <- distances[[1]]
for (jj in 2:length(distances)){dist_matrix<-rbind(dist_matrix,distances[[jj]])}
dist_matrix <- distances[[1]]
for (jj in 2:length(distances)){dist_matrix<-cbind(dist_matrix,distances[[jj]])}
dist_matrix
as_tibble(dist_matrix)
dist_matrix <- as_tibble(dist_matrix)
colnames(dist_matrix)
names <- colnames(dist_matrix)
names <- colnames(dist_matrix)
for (ii in 1:nrow(dist_matrix)){
for (jj in 1:nrow(dist_matrix)){
c(names[[ii]],names[[jj]],dist_matrix[ii.jj]) %>% print()
}
}
for (ii in 1:nrow(dist_matrix)){
for (jj in 1:nrow(dist_matrix)){
c(names[[ii]],names[[jj]],dist_matrix[ii,jj]) %>% print()
}
}
ii<-1
jj<-1
dist_matrix[ii,jj]
dist_matrix[[ii,jj]]
names[[jj]]
dist <- vector()
for (ii in 1:nrow(dist_matrix)){
for (jj in 1:nrow(dist_matrix)){
ii<-1
jj<-1
dist <- rbind(dist,c(names[[ii]],names[[jj]],dist_matrix[[ii,jj]]))
}
}
dist
as_tibble(dist)
dist <- vector()
for (ii in 1:nrow(dist_matrix)){
for (jj in ii:nrow(dist_matrix)){
dist <- rbind(dist,c(names[[ii]],names[[jj]],dist_matrix[[ii,jj]]))
}
}
as_tibble(dist)
as_tibble(dist) %>% distinct()
dist <- as_tibble(dist)
colnames(dist) <- c("Gene1", "Gene2", "Distance")
dist
dist %>% filter(!is.na(Distance))
dist %>% filter(!is.na(Distance))->dist
dist
dist %>% filter(!is.na(Distance), Distance >0)->dist
dist
dist %>% filter(Distance < 2000)
dist %>% filter(!is.na(Distance), Distance >0) %>% mutate(Distance = as.integer(Distance) )->dist
dist %>% filter(Distance < 2000)
dist %>% filter(Distance < 5000)
dist <- vector()
for (ii in 1:nrow(dist_matrix)){
for (jj in ii:nrow(dist_matrix)){
dist <- rbind(dist,c(names[[ii]],names[[jj]],dist_matrix[[ii,jj]]))
}
}
dist <- as_tibble(dist)
colnames(dist) <- c("Gene1", "Gene2", "Distance")
dist %>% filter(!is.na(Distance)) %>% mutate(Distance = as.integer(Distance) )%>%filter(Distance >0)->dist
dist %>% filter(Distance < 5000)
dist_1 <- dist %>% mutate(Gene1 = paste0(Gene1,".1"),Gene2 = paste0(Gene2,".1"))
dist_1
dist_1 %>% filter(Distance < 5000)
dist <- vector()
for (ii in 1:nrow(dist_matrix)){
for (jj in ii:nrow(dist_matrix)){
dist <- rbind(dist,c(names[[ii]],names[[jj]],dist_matrix[[ii,jj]]))
}
}
dist <- as_tibble(dist)
colnames(dist) <- c("Gene1", "Gene2", "Distance")
dist %>% filter(!is.na(Distance)) %>% mutate(Distance = as.integer(Distance) )%>%filter(Distance >0)->dist
dist %>% filter(Distance < 5000)
dist_1 <- dist %>% mutate(Gene1 = paste0("Athaliana_",Gene1,".1"),Gene2 = paste0("Athaliana_",Gene2,".1"))
dist_1 %>% filter(Distance < 5000)
sink("Connections.txt",append = F)
cat(
"DATASET_CONNECTION
SEPARATOR COMMA
DATASET_LABEL,Distance5K
COLOR,#ff0ff0
#if set to 1, arrows will be drawn on the destination end of each connection line
DRAW_ARROWS,0
#when arrows are displayed, this option sets their size
ARROW_SIZE,20
#maximum width specified in the dataset will be drawn with this value. All other widths will be scaled down proportionally.
MAXIMUM_LINE_WIDTH,10
#Angle can be any value between -80 and 80. With angle set to 0 lines will be straight.
CURVE_ANGLE,0
#if CENTER_CURVES is set to 1, center of the tree (in circular display mode only) will be used as the control point for all curves, ignoring 'CURVE_ANGLE'
CENTER_CURVES,1
#if ALIGN_TO_LABELS is set to 1, connections from/to leaf nodes will start/end next to the leaf label, and not on the branch
ALIGN_TO_LABELS,1
DATA
")
for (ii in 1:length(dist_1$Gene1)){
cat(paste(dist_1[ii,1:2],sep = ","))
cat("5,#000000,normal,neighbor\n")
}
sink()
dist_1 <- dist_1 %>% filter(Distance < 5000)
sink("Connections.txt",append = F)
cat(
"DATASET_CONNECTION
SEPARATOR COMMA
DATASET_LABEL,Distance5K
COLOR,#ff0ff0
#if set to 1, arrows will be drawn on the destination end of each connection line
DRAW_ARROWS,0
#when arrows are displayed, this option sets their size
ARROW_SIZE,20
#maximum width specified in the dataset will be drawn with this value. All other widths will be scaled down proportionally.
MAXIMUM_LINE_WIDTH,10
#Angle can be any value between -80 and 80. With angle set to 0 lines will be straight.
CURVE_ANGLE,0
#if CENTER_CURVES is set to 1, center of the tree (in circular display mode only) will be used as the control point for all curves, ignoring 'CURVE_ANGLE'
CENTER_CURVES,1
#if ALIGN_TO_LABELS is set to 1, connections from/to leaf nodes will start/end next to the leaf label, and not on the branch
ALIGN_TO_LABELS,1
DATA
")
for (ii in 1:length(dist_1$Gene1)){
cat(dist_1[ii,1])
cat(",")
cat(dist_1[ii,2])
cat(",5,#000000,normal,neighbor\n")
}
sink()
sink("Connections.txt",append = F)
cat(
"DATASET_CONNECTION
SEPARATOR COMMA
DATASET_LABEL,Distance5K
COLOR,#ff0ff0
#if set to 1, arrows will be drawn on the destination end of each connection line
DRAW_ARROWS,0
#when arrows are displayed, this option sets their size
ARROW_SIZE,20
#maximum width specified in the dataset will be drawn with this value. All other widths will be scaled down proportionally.
MAXIMUM_LINE_WIDTH,10
#Angle can be any value between -80 and 80. With angle set to 0 lines will be straight.
CURVE_ANGLE,0
#if CENTER_CURVES is set to 1, center of the tree (in circular display mode only) will be used as the control point for all curves, ignoring 'CURVE_ANGLE'
CENTER_CURVES,1
#if ALIGN_TO_LABELS is set to 1, connections from/to leaf nodes will start/end next to the leaf label, and not on the branch
ALIGN_TO_LABELS,1
DATA
")
for (ii in 1:length(dist_1$Gene1)){
cat(dist_1[[ii,1]])
cat(",")
cat(dist_1[[ii,2]])
cat(",5,#000000,normal,neighbor\n")
}
sink()
dist_1 %>% filter(grepl("12020",Gene1))
dist_1 <- dist %>% mutate(Gene1 = paste0("Athaliana_",Gene1,".1"),Gene2 = paste0("Athaliana_",Gene2,".1"))
dist_1 %>% filter(grepl("12020",Gene1))
dist_1 %>% filter(grepl("12010",Gene1))
dist_1 %>% filter(grepl("12010",Gene1) |grepl("12010",Gene2))
dist <- vector()
for (ii in 1:nrow(dist_matrix)){
for (jj in ii:nrow(dist_matrix)){
dist <- rbind(dist,c(names[[ii]],names[[jj]],dist_matrix[[ii,jj]]))
}
}
dist <- as_tibble(dist)
colnames(dist) <- c("Gene1", "Gene2", "Distance")
dist %>% filter(!is.na(Distance)) %>% mutate(Distance = as.integer(Distance) )->dist
dist %>% filter(Distance < 5000)
dist_1 <- dist %>% mutate(Gene1 = paste0("Athaliana_",Gene1,".1"),Gene2 = paste0("Athaliana_",Gene2,".1"))
#dist_1 <- dist_1 %>% filter(Distance < 5000)
dist_1 %>% filter(grepl("12010",Gene1) |grepl("12010",Gene2))
which(names %in% "Athaliana_AT4G12010.1")
which(names == "Athaliana_AT4G12010.1")
(names == "Athaliana_AT4G12010.1")
which(names == "AT4G12010")
which(names == "AT4G12020")
dist_matrix[85,86]
dist_matrix[86,85]
gr[85]
gr[86]
distance(gr[85],gr[86])
?distance
distance(gr[85],gr[86],ignore.strand = T)
distances <- vector(length = length(gr), type = "list")
distances <- vector(length = length(gr))
for (i in 1:length(gr)){
a <- GenomicRanges::distance(gr[i], gr, select="all",ignore.strand = T)
b <- tibble(column = a)
colnames(b) <- gr[i]@elementMetadata@listData$id
distances[[i]] <- b
}
distances
dist_matrix <- distances[[1]]
for (jj in 2:length(distances)){dist_matrix<-cbind(dist_matrix,distances[[jj]])}
dist_matrix <- as_tibble(dist_matrix)
names <- colnames(dist_matrix)
dist <- vector()
for (ii in 1:nrow(dist_matrix)){
for (jj in ii:nrow(dist_matrix)){
dist <- rbind(dist,c(names[[ii]],names[[jj]],dist_matrix[[ii,jj]]))
}
}
dist <- as_tibble(dist)
colnames(dist) <- c("Gene1", "Gene2", "Distance")
dist %>% filter(!is.na(Distance)) %>% mutate(Distance = as.integer(Distance) )->dist
dist %>% filter(Distance < 5000)
dist %>% filter(!is.na(Distance)) %>% mutate(Distance = as.integer(Distance)) %>% filter(Distance >0)->dist
dist %>% filter(Distance < 5000)
dist_1 <- dist %>% mutate(Gene1 = paste0("Athaliana_",Gene1,".1"),Gene2 = paste0("Athaliana_",Gene2,".1"))
dist_1 <- dist_1 %>% filter(Distance < 5000)
dist_1 %>% filter(grepl("12010",Gene1) |grepl("12010",Gene2))
sink("Connections.txt",append = F)
cat(
"DATASET_CONNECTION
SEPARATOR COMMA
DATASET_LABEL,Distance5K
COLOR,#ff0ff0
#if set to 1, arrows will be drawn on the destination end of each connection line
DRAW_ARROWS,0
#when arrows are displayed, this option sets their size
ARROW_SIZE,20
#maximum width specified in the dataset will be drawn with this value. All other widths will be scaled down proportionally.
MAXIMUM_LINE_WIDTH,10
#Angle can be any value between -80 and 80. With angle set to 0 lines will be straight.
CURVE_ANGLE,0
#if CENTER_CURVES is set to 1, center of the tree (in circular display mode only) will be used as the control point for all curves, ignoring 'CURVE_ANGLE'
CENTER_CURVES,1
#if ALIGN_TO_LABELS is set to 1, connections from/to leaf nodes will start/end next to the leaf label, and not on the branch
ALIGN_TO_LABELS,1
DATA
")
for (ii in 1:length(dist_1$Gene1)){
cat(dist_1[[ii,1]])
cat(",")
cat(dist_1[[ii,2]])
cat(",5,#000000,normal,neighbor\n")
}
sink()
dist_1 <- dist_1 %>% filter(Distance < 2000)
sink("Connections2K.txt",append = F)
cat(
"DATASET_CONNECTION
SEPARATOR COMMA
DATASET_LABEL,Distance2K
COLOR,#ff0ff0
#if set to 1, arrows will be drawn on the destination end of each connection line
DRAW_ARROWS,0
#when arrows are displayed, this option sets their size
ARROW_SIZE,20
#maximum width specified in the dataset will be drawn with this value. All other widths will be scaled down proportionally.
MAXIMUM_LINE_WIDTH,10
#Angle can be any value between -80 and 80. With angle set to 0 lines will be straight.
CURVE_ANGLE,0
#if CENTER_CURVES is set to 1, center of the tree (in circular display mode only) will be used as the control point for all curves, ignoring 'CURVE_ANGLE'
CENTER_CURVES,1
#if ALIGN_TO_LABELS is set to 1, connections from/to leaf nodes will start/end next to the leaf label, and not on the branch
ALIGN_TO_LABELS,1
DATA
")
for (ii in 1:length(dist_1$Gene1)){
cat(dist_1[[ii,1]])
cat(",")
cat(dist_1[[ii,2]])
cat(",5,#000000,normal,neighbor\n")
}
sink()
dist_1 <- dist %>% mutate(Gene1 = paste0("Athaliana_",Gene1,".1"),Gene2 = paste0("Athaliana_",Gene2,".1"))
dist_1 <- dist_1 %>% filter(Distance < 5000)
dist_1 %>% filter(grepl("12010",Gene1) |grepl("12010",Gene2))
sink("Connections5K.txt",append = F)
cat(
"DATASET_CONNECTION
SEPARATOR COMMA
DATASET_LABEL,Distance5K
COLOR,#ff0ff0
#if set to 1, arrows will be drawn on the destination end of each connection line
DRAW_ARROWS,0
#when arrows are displayed, this option sets their size
ARROW_SIZE,20
#maximum width specified in the dataset will be drawn with this value. All other widths will be scaled down proportionally.
MAXIMUM_LINE_WIDTH,10
#Angle can be any value between -80 and 80. With angle set to 0 lines will be straight.
CURVE_ANGLE,0
#if CENTER_CURVES is set to 1, center of the tree (in circular display mode only) will be used as the control point for all curves, ignoring 'CURVE_ANGLE'
CENTER_CURVES,1
#if ALIGN_TO_LABELS is set to 1, connections from/to leaf nodes will start/end next to the leaf label, and not on the branch
ALIGN_TO_LABELS,1
DATA
")
for (ii in 1:length(dist_1$Gene1)){
cat(dist_1[[ii,1]])
cat(",")
cat(dist_1[[ii,2]])
cat(",5,#000000,normal,neighbor\n")
}
sink()
getwd()
x_pl
x_pl %>% filter(!is.na(OG)) %>% print(n=200)
clade_og
(clade_og$Clade %in% partition$label)
partition %>% filter(label %ni% clade_og$Clade)
partition %>% filter(label %in% clade_og$Clade)
partition %>% filter(label %in% clade_og$Clade)
partition %>% filter(label %ni% clade_og$Clade)
og_summary
clade_og %>% group_by(Clade) %>% summarise(n=n()) %>% arrange(Clade)
clade_og %>% group_by(Clade) %>% summarise(n=n()) %>% arrange(Clade) %>%print(n=100)
clade_og %>% group_by(Clade) %>% summarise(n=n()) %>% arrange(n) %>%print(n=100)
setwd("~/BioInf/ArabidopsisRENSEQ/Phylogeny/")
setwd("~/BioInf/ArabidopsisRENSEQ/Phylogeny/")
og_summary
clade_og
clade_og %>% mutate(Name = str_remove(name,"\\/.*$"))
clade_og %>% mutate(Name = str_remove(name,"\\/.*$"), Clade = as.factor(Clade))
clade_og %>% mutate(Name = str_remove(name,"\\/.*$"), Clade = as.factor(Clade)) %>% select(-name) -> export_og
export_og
(export_og$Clade %in% partition$label)
Common
(export_og$Clade %in% Common$Clade_0)
(export_og$Clade %in% str_remove(Common$Clade_0,"_.*"))
Common %>% mutate(ExportClade = str_remove(Common$Clade_0,"_.*")) %>% select(Clade_0, ExportClade) %>% distinct()
export_og
Common %>% mutate(Clade = str_remove(Common$Clade_0,"_.*")) %>% select(Clade_0, Clade) %>% distinct() %>% left_join(export_og)
Common %>% mutate(Clade = str_remove(Common$Clade_0,"_.*")) %>%
select(Clade_0, Clade) %>%
distinct() %>%
left_join(export_og) %>% select(-Clade) -> export_og
export_og
export_og %>% mutate(Clade_0 = as.factor(Clade_0))
export_og %>% mutate(Clade_0 = as.factor(Clade_0))->export_og
getwd()
levels(export_og$Clade_0)
for (clade in levels(export_og$Clade_0)){
tips <- export_og %>% filter(Clade_0 ==clade)
print(clade)
print(tips)
#write_delim(x = as.data.frame(tipnames), path = paste0("./Autoclades_70/",clade, "_",length(tips$label),".txt"), delim = "\t",quote_escape = "double",append = F,col_names = F)
}
export_og %>% mutate(Clade_0 = as.factor(Clade_0)) %>% filter(!is.na(Name))->export_og
levels(export_og$Clade_0)
export_og
levels(export_og$Clade_0)
for (clade in levels(export_og$Clade_0)){
tips <- export_og %>% filter(Clade_0 ==clade)
print(clade)
print(tips)
#write_delim(x = as.data.frame(tipnames), path = paste0("./Autoclades_70/",clade, "_",length(tips$label),".txt"), delim = "\t",quote_escape = "double",append = F,col_names = F)
}
for (clade in levels(export_og$Clade_0)){
tips <- export_og %>% filter(Clade_0 ==clade)
if (nrow(tips) >0){print(clade)
print(tips)}
#write_delim(x = as.data.frame(tipnames), path = paste0("./Autoclades_70/",clade, "_",length(tips$label),".txt"), delim = "\t",quote_escape = "double",append = F,col_names = F)
}
for (clade in levels(export_og$Clade_0)){
tips <- export_og %>% filter(Clade_0 ==clade) %>% select(Name)
if (nrow(tips) >0){print(clade)
print(tips)}
#write_delim(x = as.data.frame(tipnames), path = paste0("./Autoclades_70/",clade, "_",length(tips$label),".txt"), delim = "\t",quote_escape = "double",append = F,col_names = F)
}
for (clade in levels(export_og$Clade_0)){
tips <- export_og %>% filter(Clade_0 ==clade) %>% select(Name)
if (nrow(tips) >0){print(clade)
print(tips)
write_delim(x = as.data.frame(tips),
path = paste0("./Autoclades_70/",clade,"outgroup.txt"),
delim = "\t",quote_escape = "double",
append = F,col_names = F)
}
}
for (clade in levels(export_og$Clade_0)){
tips <- export_og %>% filter(Clade_0 ==clade) %>% select(Name)
if (nrow(tips) >0){print(clade)
print(tips)
write_delim(x = as.data.frame(tips),
path = paste0("./Autoclades_70/",clade,".outgroup.txt"),
delim = "\t",quote_escape = "double",
append = F,col_names = F)
}
}
### Import results -----
jplace_files <- list.files("Outgroup/", pattern = ".jplace")
list.files("Outgroup/", pattern = ".jplace")
### Import results -----
jplace_files <- list.files("Outgroup/", pattern = ".*jplace")
list.files("Outgroup/", pattern = ".*jplace")
### Import results -----
jplace_files <- list.files("Autoclades_70/Outgroup/", pattern = ".*jplace")
### Import results -----
jplace_files <- list.files("Autoclades_70/Outgroup/", pattern = ".*jplace",recursive = F,full.names = T)
### Import results -----
jplace_files <- list.files("Autoclades_70/Outgroup", pattern = ".*jplace",recursive = F,full.names = T)
jplace<- read.jplace(jplace_files[[1]])
jplace
as_tibble(jplace)
jplace@placements
